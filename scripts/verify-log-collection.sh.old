#!/bin/bash
# Log Collection Verification Script
# Created: 2025-10-14
# Purpose: Verify log collection enhancements after Promtail restart

set -e

GRAFANA_API="https://grafana.jclee.me"
PROMETHEUS_API="https://prometheus.jclee.me"
LOKI_API="https://loki.jclee.me"

echo "üîç Log Collection Enhancement Verification"
echo "=========================================="
echo ""

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# 1. Check Promtail status
echo "1Ô∏è‚É£  Checking Promtail Status..."
PROMTAIL_STATUS=$(~/.claude/scripts/docker-synology.sh ps --filter name=promtail --format '{{.Status}}' 2>/dev/null | head -1)
if [[ $PROMTAIL_STATUS == Up* ]]; then
    echo -e "${GREEN}‚úÖ Promtail: $PROMTAIL_STATUS${NC}"
else
    echo -e "${RED}‚ùå Promtail: Not running${NC}"
    exit 1
fi
echo ""

# 2. Check Loki labels (new labels: service_type, criticality)
echo "2Ô∏è‚É£  Checking New Labels in Loki..."
LABELS=$(curl -s "$LOKI_API/loki/api/v1/labels" 2>/dev/null | jq -r '.data[]' | sort)
if echo "$LABELS" | grep -q "service_type"; then
    echo -e "${GREEN}‚úÖ service_type label found${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  service_type label NOT found (Promtail restart needed)${NC}"
fi

if echo "$LABELS" | grep -q "criticality"; then
    echo -e "${GREEN}‚úÖ criticality label found${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  criticality label NOT found (Promtail restart needed)${NC}"
fi
echo ""

# 3. Check log ingestion rate
echo "3Ô∏è‚É£  Checking Log Ingestion Rate..."
LOG_RATE=$(curl -s "$PROMETHEUS_API/api/v1/query?query=rate(loki_distributor_lines_received_total[5m])" 2>/dev/null | \
    jq -r '.data.result[0].value[1]' 2>/dev/null || echo "0")
TOTAL_LINES=$(curl -s "$PROMETHEUS_API/api/v1/query?query=loki_distributor_lines_received_total" 2>/dev/null | \
    jq -r '.data.result[0].value[1]' 2>/dev/null || echo "0")

if (( $(echo "$LOG_RATE > 0" | bc -l) )); then
    echo -e "${GREEN}‚úÖ Log ingestion active: $LOG_RATE lines/sec${NC}"
    echo -e "${GREEN}   Total lines collected: $TOTAL_LINES${NC}"
else
    echo -e "${RED}‚ùå No logs being ingested${NC}"
fi
echo ""

# 4. Check alert rules
echo "4Ô∏è‚É£  Checking Alert Rules..."
ALERT_RULES=$(curl -s "$PROMETHEUS_API/api/v1/rules?type=alert" 2>/dev/null | \
    jq -r '.data.groups[] | select(.name=="log_collection_alerts") | .rules[].name' 2>/dev/null)
RULE_COUNT=$(echo "$ALERT_RULES" | wc -l)

if [ "$RULE_COUNT" -ge 14 ]; then
    echo -e "${GREEN}‚úÖ Alert rules loaded: $RULE_COUNT rules${NC}"
    echo "   New rules:"
    echo "$ALERT_RULES" | grep -E '(LogIngestionRateDropped|CriticalServiceLogsMissing|N8nServiceLogsMissing|HighErrorLogRate|PromtailLagging|LokiIngesterFlushErrors)' | \
        sed 's/^/   - /'
else
    echo -e "${YELLOW}‚ö†Ô∏è  Expected 14+ alert rules, found: $RULE_COUNT${NC}"
fi
echo ""

# 5. Test log queries (if new labels exist)
echo "5Ô∏è‚É£  Testing Log Queries..."
if echo "$LABELS" | grep -q "service_type"; then
    echo "Testing service_type queries..."

    for TYPE in monitoring workflow infrastructure application; do
        COUNT=$(curl -s "$LOKI_API/loki/api/v1/query?query=count_over_time(%7Bservice_type%3D%22$TYPE%22%7D%5B1h%5D)" 2>/dev/null | \
            jq -r '.data.result | length' 2>/dev/null || echo "0")
        if [ "$COUNT" -gt 0 ]; then
            echo -e "   ${GREEN}‚úÖ service_type=$TYPE: $COUNT streams${NC}"
        else
            echo -e "   ${YELLOW}‚ö†Ô∏è  service_type=$TYPE: No logs${NC}"
        fi
    done

    echo ""
    echo "Testing criticality queries..."
    for CRIT in critical high medium; do
        COUNT=$(curl -s "$LOKI_API/loki/api/v1/query?query=count_over_time(%7Bcriticality%3D%22$CRIT%22%7D%5B1h%5D)" 2>/dev/null | \
            jq -r '.data.result | length' 2>/dev/null || echo "0")
        if [ "$COUNT" -gt 0 ]; then
            echo -e "   ${GREEN}‚úÖ criticality=$CRIT: $COUNT streams${NC}"
        else
            echo -e "   ${YELLOW}‚ö†Ô∏è  criticality=$CRIT: No logs${NC}"
        fi
    done
else
    echo -e "${YELLOW}‚ö†Ô∏è  Skipping query tests (new labels not found)${NC}"
    echo "   Please restart Promtail to apply new configuration:"
    echo "   ~/.claude/scripts/docker-synology.sh restart promtail-container"
fi
echo ""

# 6. Summary
echo "üìä Summary"
echo "=========================================="
echo "Promtail Status: $(echo $PROMTAIL_STATUS | cut -d' ' -f1-2)"
echo "Log Rate: $LOG_RATE lines/sec"
echo "Total Lines: $TOTAL_LINES"
echo "Alert Rules: $RULE_COUNT"
echo "New Labels: $(echo "$LABELS" | grep -E '(service_type|criticality)' | wc -l)/2"
echo ""

# 7. Next steps
if ! echo "$LABELS" | grep -q "service_type"; then
    echo "‚ö†Ô∏è  Next Steps Required:"
    echo "1. Restart Promtail to apply new configuration"
    echo "   ~/.claude/scripts/docker-synology.sh restart promtail-container"
    echo ""
    echo "2. Wait 1-2 minutes for new logs to be collected"
    echo ""
    echo "3. Re-run this verification script"
    echo "   ./scripts/verify-log-collection.sh"
    echo ""
else
    echo -e "${GREEN}‚úÖ Log Collection Enhancement Verified!${NC}"
    echo ""
    echo "üéâ All enhancements are active:"
    echo "   - New labels: service_type, criticality"
    echo "   - Alert rules: 14 rules active"
    echo "   - Log ingestion: Active"
    echo ""
    echo "Next: Test queries in Grafana Explore"
    echo "https://grafana.jclee.me/explore"
fi
